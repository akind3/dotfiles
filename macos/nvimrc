call plug#begin('~/.vim/plugged')

set rnu
set nu
"set guifont="Fira Code:h16"
set clipboard=unnamed
" set clipboard=unnamedplus
set statusline+=%F
set path +=autoload
set path +=**
set wildmenu
set tags=tags
" split panel
set splitbelow
set splitright
" ctrlp setting
set wildmode=longest,list
set wildignore+=*.a,*.o
set wildignore+=*.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.bmp,*.jpg,*.png,*.gif,*.ico
set wildignore+=*.pyc,*.pyo,*.pyd
set nocompatible " be iMproved, required

filetype on" required
filetype plugin indent on " required



let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6, 'highlight': 'Todo', 'border': 'sharp' } }

let mapleader = ','
" let g:rehash256 = 1

nnoremap Y y$
nnoremap V v$

" NERDTree setting 
" autocmd vimenter * NERDTree
map <C-t> :NERDTreeToggle<CR>

" map settings 
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap <C-\>\ <C-w>v
nmap <C-\>= <C-w>s
" map <C-b> :browse oldfiles<CR> 
map <C-n> <C-e>
map <C-p> <C-y>

nnoremap <silent> <leader>n :new <CR>
nnoremap <silent> <leader>vn :vnew <CR>
nnoremap <silent> <leader>vs :vsplit <CR>
nnoremap <silent> <leader>, :clo <CR>

nnoremap <silent> <leader>tn :tabnew <CR>
nnoremap <silent> <leader>tc :tabclo <CR>
nnoremap <silent> <leader>tj :tabnext <CR>
nnoremap <silent> <leader>tk :tabpre <CR>
nnoremap <silent> <leader>th :tabfir <CR>
nnoremap <silent> <leader>tl :tablast <CR>

nnoremap <silent> <leader>b :Tagbar <CR>

nnoremap <silent> <leader>cd :exe "cd" input('--------------------------------------------------------> Which directory to switch: ') <CR>

" nnoremap <silent> <leader>tn :exe "tabn" nr2char(getchar())<cr>
" nnoremap <buffer> <leader> xyz :call SomeFunc(input('Param: '))<CR>
" call fzf#vim#files(<q-args>, s:p(<bang>0), <bang>0)',

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nnoremap <silent> <leader>fo :exe "FzfFiles" input('Which directory to switch(Default is .): ')<CR>
nnoremap <silent> <leader>ff :exe "FzfNeighFiles" <CR>
nnoremap <silent> <leader>fd :exe "FzfNeighDirs " <CR>
nnoremap <silent> <leader>F :FzfFiles!<CR>
" nnoremap <silent> <leader>k :FzfFiles ** <CR>
nnoremap <silent> <leader>fh :FzfHistory<CR>
nnoremap <silent> <leader>f: :FzfHistory:<CR>
nnoremap <silent> <leader>f/ :FzfHistory/<CR>
nnoremap <silent> <leader>fb :FzfBuffers<CR>
nnoremap <silent> <leader>f; :FzfCommands<CR>
nnoremap <silent> <leader>fl :FzfBlines<CR>
nnoremap <silent> <leader>fm :FzfMarks<CR>
nnoremap <silent> <leader>fs :FzfSnippets<CR>
nnoremap <silent> <F1> :FzfHelptags<CR>
nnoremap <silent> <leader>fr :FzfRg<CR>
inoremap <silent> <F1><ESC> :FzfHelptags<CR>
nnoremap <silent> <leader>fT :FzfTags<CR>
nnoremap <silent> <leader>ft :FzfBTags<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

function! s:fzf_neighbouring_files()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'ag -g "" -f ' . cwd . ' --depth 0'

  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

function! s:fzf_neighbouring_dirs()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'fd --type d -d 1 --full-path ' ". cwd ." 
  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

command! FzfNeighFiles call s:fzf_neighbouring_files()
command! FzfNeighDirs call s:fzf_neighbouring_dirs()



Plug 'preservim/nerdtree'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'


let g:python3_host_prog="/usr/bin/python3"
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete=1
let g:deoplete#sources#jedi#enable_typeinfo = 0 "gotta go fast
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif "automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert

Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }


Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'tpope/vim-fugitive'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-sensible'

Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

Plug 'honza/vim-snippets'
Plug 'tomasr/molokai'

"Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
"let g:pymode = 1

"Plug 'itchyny/lightline.vim'
"let g:lightline = {
"      \ 'active': {
"      \   'left': [ [ 'mode', 'paste' ],
"      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
"      \ },
"      \ 'component_function': {
"      \   'gitbranch': 'FugitiveHead'
"      \ },
"      \ }

"Plug 'szw/vim-tags'
"Plug 'vim-scripts/taglist.vim'
"let g:vim_tags_auto_generate = 1

Plug 'majutsushi/tagbar'
Plug 'mgedmin/pythonhelper.vim'

call plug#end()

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" let g:molokai_original = 1
colorscheme molokai
" set backgroud transparency
" hi Normal guibg=NONE ctermbg=NONE
" set background=dark
" set Vim-specific sequences for RGB colors
"
"
