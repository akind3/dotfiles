call plug#begin('~/.vim/plugged')

set rnu
set nu
"set guifont="Fira Code:h16"
set clipboard=unnamed
" set clipboard=unnamedplus
set statusline+=%F
set path +=autoload
set path +=**
set wildmenu
set tags=tags
" split panel
set splitbelow
set splitright
" ctrlp setting
set wildmode=longest,list
set wildignore+=*.a,*.o
set wildignore+=*.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.bmp,*.jpg,*.png,*.gif,*.ico
set wildignore+=*.pyc,*.pyo,*.pyd
set nocompatible " be iMproved, required

"filetype on" required
"filetype indent on " required
filetype plugin indent on " required



let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6, 'highlight': 'Todo', 'border': 'sharp' } }

let mapleader = ','
" let g:rehash256 = 1

nnoremap Y y$
nnoremap V v$

" NERDTree setting 
" autocmd vimenter * NERDTree
" map <C-t> :NERDTreeToggle<CR>
map <silent> <leader>z :NERDTreeToggle<CR>

" map settings 
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
" map <C-b> :browse oldfiles<CR> 
map <C-n> <C-e>
map <C-p> <C-y>
nmap <leader>h <C-w>h
nmap <leader>j <C-w>j
nmap <leader>k <C-w>k
nmap <leader>l <C-w>l

nnoremap <silent> <leader>n :new <CR>
nnoremap <silent> <leader>vn :vnew <CR>
nnoremap <silent> <leader>vs :vsplit <CR>
nnoremap <silent> <leader>s :split <CR>
nnoremap <silent> <leader>, :close! <CR>
nnoremap <silent> <leader>. :w <CR>
nnoremap <silent> <leader>/ :source % <CR>
nnoremap <silent> <leader>I :PlugInstall <CR>


nnoremap <silent> <leader>tn :tabnew <CR>
nnoremap <silent> <leader>tc :tabclo <CR>
nnoremap <silent> <leader>tj :tabnext <CR>
nnoremap <silent> <leader>tk :tabpre <CR>
nnoremap <silent> <leader>th :tabfir <CR>
nnoremap <silent> <leader>tl :tablast <CR>

" nnoremap <silent> <leader>m :Vista <CR>
" nnoremap <silent> <Leader>m :<C-u>Vista<CR>
nnoremap <silent> <Leader>m :Tagbar<CR>

nnoremap <silent> <leader>cd :exe "cd" input('--------------------------------------------------------> Which directory to switch: ') <CR>

" nnoremap <silent> <leader>tn :exe "tabn" nr2char(getchar())<cr>
" nnoremap <buffer> <leader> xyz :call SomeFunc(input('Param: '))<CR>
" call fzf#vim#files(<q-args>, s:p(<bang>0), <bang>0)',

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nnoremap <silent> <leader>fo :exe "FzfFiles"<CR>
nnoremap <silent> <leader>fO :exe "FzfFiles" input('Which directory to switch(Default is .): ')<CR>
nnoremap <silent> <leader>ff :exe "FzfNeighFiles" <CR>
nnoremap <silent> <leader>fd :exe "FzfNeighDirs " <CR>
nnoremap <silent> <leader>F :FzfFiles!<CR>
" nnoremap <silent> <leader>k :FzfFiles ** <CR>
nnoremap <silent> <leader>fh :FzfHistory<CR>
nnoremap <silent> <leader>f: :FzfHistory:<CR>
nnoremap <silent> <leader>f/ :FzfHistory/<CR>
nnoremap <silent> <leader>fb :FzfBuffers<CR>
nnoremap <silent> <leader>f; :FzfCommands<CR>
nnoremap <silent> <leader>fl :FzfBlines<CR>
nnoremap <silent> <leader>fm :FzfMarks<CR>
nnoremap <silent> <leader>fs :FzfSnippets<CR>
nnoremap <silent> <F1> :FzfHelptags<CR>
nnoremap <silent> <leader>fr :FzfRg<CR>
inoremap <silent> <F1><ESC> :FzfHelptags<CR>
nnoremap <silent> <leader>fT :FzfTags<CR>
nnoremap <silent> <leader>ft :FzfBTags<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

function! s:fzf_neighbouring_files()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'ag -g "" -f ' . cwd . ' --depth 0'

  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

function! s:fzf_neighbouring_dirs()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'fd --type d -d 1 --full-path ' ". cwd ." 
  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

command! FzfNeighFiles call s:fzf_neighbouring_files()
command! FzfNeighDirs call s:fzf_neighbouring_dirs()


Plug 'preservim/nerdtree'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'


"let g:python3_host_prog="/usr/bin/python3"
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
""Plug 'deoplete-plugins/deoplete-jedi'
"let g:deoplete#enable_at_startup = 1
"let g:deoplete#auto_complete=1
"let g:deoplete#sources#jedi#enable_typeinfo = 0 "gotta go fast
"autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif "automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert

Plug 'neoclide/coc.nvim', {'branch': 'release'}
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'


"Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
" imap <leader>i <Plug>(neosnippet_expand)


Plug 'tpope/vim-fugitive'
nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>
"nmap <silent><leader>gh :Gbrowse<cr>

"Plug 'tpope/vim-rhubarb' " hub extension for fugitive
"" i_CTRL-X_CTRL-O
""
"Plug 'sodapopcan/vim-twiggy'
nmap <silent><leader>gt :Twiggy<cr>

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
"Plug 'tpope/vim-sensible'
" Plug 'tpope/vim-markdown'
" Plug 'godlygeek/tabular'
" Plug 'plasticboy/vim-markdown'
" Plug 'MichaelMure/mdr'
Plug 'skanehira/preview-markdown.vim'
let g:preview_markdown_parser = 'glow'
let g:preview_markdown_vertical = 1
let g:preview_makrdown_auto_update =1
nmap <silent> <leader>; :PreviewMarkdown<CR>
" let g:vim_markdown_folding_disabled = 1


Plug 'vim-syntastic/syntastic'

" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsEditSplit="vertical"

Plug 'tomasr/molokai'
" Plug 'rafi/awesome-vim-colorschemes'


"Plug 'davidhalter/jedi-vim'
" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

      " \   'gitbranch': 'FugitiveStatusline'
      "
Plug 'majutsushi/tagbar'
let g:tagbar_foldlevel = 2
" Plug 'liuchengxu/vista.vim'
" let g:vista_cursor_delay = 300
" let g:vista_echo_cursor_strategy='floating_win'
" let g:vista_echo_cursor_strategy='scroll'
" let g:vista_fzf_preview = ['right:50%']

call plug#end()

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:molokai_original = 1
colorscheme molokai
" colorscheme atom
" colorscheme onedark
" set backgroud transparency
hi Normal guibg=NONE ctermbg=NONE
" set background=dark
" set Vim-specific sequences for RGB colors
