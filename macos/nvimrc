" Plug {{{
call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'sheerun/vim-polyglot'
Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'prettier/vim-prettier'


" Plug 'skanehira/preview-markdown.vim'
call plug#end()
" }}}


" Color theme {{{ 
" set background=dark
colorscheme molokai
" }}


" Basic settings {{{ 
set nocompatible " be iMproved, required
set ttyfast 
filetype off 
filetype plugin indent on 

set laststatus=1
set encoding=utf-8
set autoread
set autoindent
set backspace=indent,eol,start " Make backspace key more powerful.
set incsearch
set hlsearch


set hidden
set visualbell
set nu
set rnu
set nobackup
set noswapfile
set noshowmode

" set title

" Global tab width
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Set to show invisibles (tabs & trailing spaces) & their highlight color
set list listchars=tab:»\ ,trail:·

" Configure spell checking
nmap <silent> <leader>p :set spell!<CR>
set spelllang=en_us

" Customize completion menu
set completeopt=noinsert,menuone,noselect

" set clipboard=unnamedplus
" set nowrap
set clipboard=unnamed
set statusline+=%F
set path +=autoload
set path +=**
set wildmenu
set tags=tags
set splitbelow
set splitright
set wildmode=longest,list
set wildignore+=*.a,*.o
set wildignore+=*.DS_Store,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.bmp,*.jpg,*.png,*.gif,*.ico
set wildignore+=*.pyc,*.pyo,*.pyd,__pycache__
set wildignore+=.idea,.vscode

let mapleader = ','

nnoremap Y 0y$
nnoremap V 0v$
nnoremap C 0d$
nnoremap D 0d$

inoremap <C-b> <Backspace>
inoremap <C-x> <Del>

inoremap <C-p> <Up>
inoremap <C-n> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-k> <Up>
inoremap <C-j> <Down>

nnoremap <C-p> <Up>
nnoremap <C-n> <Down>
nnoremap <C-h> <Left>
nnoremap <C-l> <Right>
nnoremap <C-k> <Up>
nnoremap <C-j> <Down>

nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

nnoremap <silent> <leader>n :new <CR>
nnoremap <silent> <leader>vn :vnew <CR>
nnoremap <silent> <leader>vs :vsplit <CR>
nnoremap <silent> <leader>s :split <CR>
" nnoremap <silent> <leader>, :close! <CR>
nnoremap <silent> <leader>c :close! <CR>
nnoremap <silent> <leader>q :quit <CR>
nnoremap <silent> <leader>Q :quit! <CR>
nnoremap <silent> <leader>. :w <CR>
nnoremap <silent> <C-s> :w <CR>
nnoremap <silent> <leader>/ :source % <CR>
nnoremap <silent> <leader>I :PlugInstall <CR>

nnoremap <silent> <leader>tn :tabnew <CR>
nnoremap <silent> <leader>tc :tabclo <CR>
nnoremap <silent> <leader>tj :tabnext <CR>
nnoremap <silent> <leader>tk :tabpre <CR>
nnoremap <silent> <leader>th :tabfir <CR>
nnoremap <silent> <leader>tl :tablast <CR>
" }}}


" nerdtree {{{
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.egg-info$', '__pycache__', '__pycache__']
map <silent> <leader>z :NERDTreeToggle<CR>
" autocmd vimenter * NERDTree
" }}}

" auto pair {{{ 
let g:AutoPairsMapCh = 0
"}}}


"{{{
let g:ale_lint_on_save = 1
let g:ale_xml_xmllint_indentsize = 2
"}}}
"
" vim-prettier {{{
" let g:prettier#autoformat = 0
" let g:prettier#config#print_width = 120 
" autocmd TextChanged,InsertLeave *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml PrettierAsync
" }}}


" dense-analysis/ale {{{
" let g:ale_fix_on_save = 1
" \ linter 'python': ['flake8','pydocstyle','bandit','mypy'] 
" \ fixer  'python': ['black','isort']
" let g:ale_linter= { }
" let g:ale_fixers = { 'javascript': ['prettier', 'eslint']}
" }}}


" tagbar {{{
let g:tagbar_foldlevel = 99
nnoremap <silent> <Leader>m :Tagbar<CR>
" }}}


" vim-table-mode {{{ 
" let g:table_mode_delimiter = ' '
" nnoremap <silent> <leader>tm :TableModeToggle<CR>
" nnoremap <silent> <leader>tr :TableModeRealign<CR>
" }}}
"

" vim-airline {{{ 
"let g:airline_powerline_fonts=1
"let g:airline_theme = 'wombat'
"let g:airline#extensions#tabline#enabled = 1
"function! ArilineInit()
"    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
"    let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%F'])
"    "let g:airline_section_c = airline#section#create(['filetype'])
"    let g:airline_section_x = airline#section#create(['%P'])
"    let g:airline_section_y = airline#section#create(['%B'])
"    let g:airline_section_z = airline#section#create_right(['%l', '%c'])
"endfunction
"autocmd VimEnter * call ArilineInit()
" }}}


" preview-makrdown {{{  
" let g:preview_markdown_parser = 'glow'
" let g:preview_markdown_vertical = 1
" let g:preview_makrdown_auto_update =1
" nmap <silent> <leader>; :PreviewMarkdown<CR>
" let g:preview_markdown_parser = 'mdcat'
" let g:vim_markdown_folding_disabled = 1
" }}}


" deoplete {{{
let g:python3_host_prog="/usr/bin/python3"
let g:deoplete#enable_at_startup = 1
" let g:deoplete#auto_complete=1
" let g:deoplete#sources#jedi#enable_typeinfo = 0 "gotta go fast
" call deoplete#custom#var('omni', 'functions', {
	" \   'css': [ 'csscomplete#CompleteCSS' ]
	" \ })
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif 
" }}}


" fzf {{{ 
let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6, 'highlight': 'Todo', 'border': 'sharp' } }

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nnoremap <silent> <leader>fo :exe "FzfFiles"<CR>
nnoremap <silent> <leader>fO :exe "FzfFiles" input('Which directory to switch(Default is .): ')<CR>
nnoremap <silent> <leader>ff :exe "FzfNeighFiles" <CR>
nnoremap <silent> <leader>fd :exe "FzfNeighDirs " <CR>
nnoremap <silent> <leader>F :FzfFiles!<CR>
" nnoremap <silent> <leader>k :FzfFiles ** <CR>
nnoremap <silent> <leader>fh :FzfHistory<CR>
nnoremap <silent> <leader>f: :FzfHistory:<CR>
nnoremap <silent> <leader>f/ :FzfHistory/<CR>
nnoremap <silent> <leader>fb :FzfBuffers<CR>
nnoremap <silent> <leader>f; :FzfCommands<CR>
nnoremap <silent> <leader>fl :FzfBlines<CR>
nnoremap <silent> <leader>fm :FzfMarks<CR>
nnoremap <silent> <leader>fs :FzfSnippets<CR>
nnoremap <silent> <F1> :FzfHelptags<CR>
nnoremap <silent> <leader>fr :FzfRg<CR>
inoremap <silent> <F1><ESC> :FzfHelptags<CR>
nnoremap <silent> <leader>fT :FzfTags<CR>
nnoremap <silent> <leader>ft :FzfBTags<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

function! s:fzf_neighbouring_files()
let current_file =expand("%")
let cwd = fnamemodify(current_file, ':p:h')
let command = 'ag -g "" -f ' . cwd . ' --depth 0'

call fzf#run({
\ 'source': command,
\ 'sink':   'e',
\ 'options': '-m -x +s',
\ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

function! s:fzf_neighbouring_dirs()
let current_file =expand("%")
let cwd = fnamemodify(current_file, ':p:h')
let command = 'fd --type d -d 1 --full-path ' ". cwd ." 
call fzf#run({
\ 'source': command,
\ 'sink':   'e',
\ 'options': '-m -x +s',
\ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

command! FzfNeighFiles call s:fzf_neighbouring_files()
command! FzfNeighDirs call s:fzf_neighbouring_dirs()

" }}} 



" Install plug for neovim
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" Install plug for vim 
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
