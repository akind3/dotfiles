call plug#begin('~/.vim/plugged')

set rnu
set nu
"set guifont="Fira Code:h16"
set clipboard=unnamed
" set clipboard=unnamedplus
set statusline+=%F
set path +=autoload
set path +=**
set wildmenu
set tags=tags
" split panel
set splitbelow
set splitright
set wildmode=longest,list
set wildignore+=*.a,*.o
set wildignore+=*.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.bmp,*.jpg,*.png,*.gif,*.ico
set wildignore+=*.pyc,*.pyo,*.pyd,__pycache__
set wildignore+=.idea,.vscode
set nocompatible " be iMproved, required


"filetype on" required
"filetype indent on " required
filetype plugin indent on " required

let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6, 'highlight': 'Todo', 'border': 'sharp' } }

let mapleader = ','
" let g:rehash256 = 1

nnoremap Y 0y$
nnoremap V 0v$


inoremap <C-l> <right>
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-m> <Bs>

nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <BS> <Nop>
nnoremap <Del> <Nop>

inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <BS> <Nop>
inoremap <Del> <Nop>

" NERDTree setting 
" autocmd vimenter * NERDTree
" map <C-t> :NERDTreeToggle<CR>
map <silent> <leader>z :NERDTreeToggle<CR>

" map settings 
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
" map <C-b> :browse oldfiles<CR> 
map <C-n> <C-e>
map <C-p> <C-y>
nmap <leader>h <C-w>h
nmap <leader>j <C-w>j
nmap <leader>k <C-w>k
nmap <leader>l <C-w>l

" nnoremap <silent> <leader>tm :TableModeToggle<CR>
" nnoremap <silent> <leader>tr :TableModeRealign<CR>


nnoremap <silent> <leader>n :new <CR>
nnoremap <silent> <leader>vn :vnew <CR>
nnoremap <silent> <leader>vs :vsplit <CR>
nnoremap <silent> <leader>s :split <CR>
nnoremap <silent> <leader>, :close! <CR>
nnoremap <silent> <leader>q :quit <CR>
nnoremap <silent> <leader>Q :quit! <CR>
nnoremap <silent> <leader>. :w <CR>
nnoremap <silent> <leader>/ :source % <CR>
nnoremap <silent> <leader>I :PlugInstall <CR>


nnoremap <silent> <leader>tn :tabnew <CR>
nnoremap <silent> <leader>tc :tabclo <CR>
nnoremap <silent> <leader>tj :tabnext <CR>
nnoremap <silent> <leader>tk :tabpre <CR>
nnoremap <silent> <leader>th :tabfir <CR>
nnoremap <silent> <leader>tl :tablast <CR>

" nnoremap <silent> <leader>m :Vista <CR>
" nnoremap <silent> <Leader>m :<C-u>Vista<CR>
nnoremap <silent> <Leader>m :Tagbar<CR>

nnoremap <silent> <leader>cd :exe "cd" input('--------------------------------------------------------> Which directory to switch: ') <CR>

" nnoremap <silent> <leader>tn :exe "tabn" nr2char(getchar())<cr>
" nnoremap <buffer> <leader> xyz :call SomeFunc(input('Param: '))<CR>
" call fzf#vim#files(<q-args>, s:p(<bang>0), <bang>0)',

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nnoremap <silent> <leader>fo :exe "FzfFiles"<CR>
nnoremap <silent> <leader>fO :exe "FzfFiles" input('Which directory to switch(Default is .): ')<CR>
nnoremap <silent> <leader>ff :exe "FzfNeighFiles" <CR>
nnoremap <silent> <leader>fd :exe "FzfNeighDirs " <CR>
nnoremap <silent> <leader>F :FzfFiles!<CR>
" nnoremap <silent> <leader>k :FzfFiles ** <CR>
nnoremap <silent> <leader>fh :FzfHistory<CR>
nnoremap <silent> <leader>f: :FzfHistory:<CR>
nnoremap <silent> <leader>f/ :FzfHistory/<CR>
nnoremap <silent> <leader>fb :FzfBuffers<CR>
nnoremap <silent> <leader>f; :FzfCommands<CR>
nnoremap <silent> <leader>fl :FzfBlines<CR>
nnoremap <silent> <leader>fm :FzfMarks<CR>
nnoremap <silent> <leader>fs :FzfSnippets<CR>
nnoremap <silent> <F1> :FzfHelptags<CR>
nnoremap <silent> <leader>fr :FzfRg<CR>
inoremap <silent> <F1><ESC> :FzfHelptags<CR>
nnoremap <silent> <leader>fT :FzfTags<CR>
nnoremap <silent> <leader>ft :FzfBTags<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)


" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

function! s:fzf_neighbouring_files()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'ag -g "" -f ' . cwd . ' --depth 0'

  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

function! s:fzf_neighbouring_dirs()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'fd --type d -d 1 --full-path ' ". cwd ." 
  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window': { 'width': 0.7, 'height': 0.5, 'highlight': 'Todo', 'border': 'sharp' } })
endfunction

command! FzfNeighFiles call s:fzf_neighbouring_files()
command! FzfNeighDirs call s:fzf_neighbouring_dirs()


Plug 'preservim/nerdtree'
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.egg-info$', '__pycache__', '__pycache__']

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'


"let g:python3_host_prog="/usr/bin/python3"
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
""Plug 'deoplete-plugins/deoplete-jedi'
"let g:deoplete#enable_at_startup = 1
"let g:deoplete#auto_complete=1
"let g:deoplete#sources#jedi#enable_typeinfo = 0 "gotta go fast
"autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif 
"automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert

"Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
" imap <leader>i <Plug>(neosnippet_expand)


Plug 'tpope/vim-fugitive'
" nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>
"nmap <silent><leader>gh :Gbrowse<cr>

"Plug 'tpope/vim-rhubarb' " hub extension for fugitive
"" i_CTRL-X_CTRL-O
""
"Plug 'sodapopcan/vim-twiggy'
" nmap <silent><leader>gt :Twiggy<cr>

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" for airline
let g:airline_powerline_fonts=1
let g:airline_theme = 'wombat'
let g:airline#extensions#tabline#enabled = 1
function! ArilineInit()
		let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
		let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%F'])
		"let g:airline_section_c = airline#section#create(['filetype'])
		let g:airline_section_x = airline#section#create(['%P'])
		let g:airline_section_y = airline#section#create(['%B'])
		let g:airline_section_z = airline#section#create_right(['%l', '%c'])
endfunction
autocmd VimEnter * call ArilineInit()

"Plug 'tpope/vim-sensible'
" Plug 'tpope/vim-markdown'
" Plug 'godlygeek/tabular'
" Plug 'plasticboy/vim-markdown'
" Plug 'MichaelMure/mdr'
Plug 'skanehira/preview-markdown.vim'
let g:preview_markdown_parser = 'glow'
" let g:preview_markdown_parser = 'mdcat'
let g:preview_markdown_vertical = 1
let g:preview_makrdown_auto_update =1
nmap <silent> <leader>; :PreviewMarkdown<CR>
" let g:vim_markdown_folding_disabled = 1


Plug 'vim-syntastic/syntastic'

" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsEditSplit="vertical"

Plug 'tomasr/molokai'
Plug 'rafi/awesome-vim-colorschemes'


Plug 'neoclide/coc.nvim'
" coc.nvim settings
" --

" Don't load the defx-git plugin file, not needed
let b:defx_git_loaded = 1

" Use <Tab> for trigger completion and navigate to the next complete item
let g:coc_snippet_next = '<tab>'
inoremap <silent><expr> <Tab>
	\ pumvisible() ? "\<C-n>" :
	\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
	\ <SID>check_back_space() ? "\<Tab>" :
	\ coc#refresh()

inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() :
" 	\ delimitMate#WithinEmptyPair() ? "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
" 	\"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! s:check_back_space() abort
	let col = col('.') - 1
	return ! col || getline('.')[col - 1] =~? '\s'
endfunction

augroup user_plugin_coc
	autocmd!
	autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
augroup END

" use <c-space>for trigger completion
inoremap <silent><expr> <C-space> coc#refresh()

" Movement within 'ins-completion-menu'
" imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
" imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

" Scroll pages in menu
inoremap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
inoremap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
imap     <expr><C-d> pumvisible() ? "\<PageDown>" : "\<C-d>"
imap     <expr><C-u> pumvisible() ? "\<PageUp>" : "\<C-u>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gf <Plug>(coc-rename)	
nmap <silent> gR <Plug>(coc-refactor)	

nmap <silent> <leader>cc :CocConfig<CR>

nmap gs <Plug>(coc-git-chunkinfo)
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
" show commit contains current position
nmap gC <Plug>(coc-git-commit)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
	if (index(['vim', 'help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		let l:found = CocAction('doHover')
	endif
endfunction


Plug 'majutsushi/tagbar'
let g:tagbar_foldlevel = 2
" Plug 'liuchengxu/vista.vim'
" let g:vista_cursor_delay = 300
" let g:vista_echo_cursor_strategy='floating_win'
" let g:vista_echo_cursor_strategy='scroll'
" let g:vista_fzf_preview = ['right:50%']
" Plud 'Terryma/vim-multiple-cursors'
" let g:multi_cursor_use_default_mapping=1
Plug 'dhruvasagar/vim-table-mode'
" let g:table_mode_delimiter = ' '


call plug#end()

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:molokai_original = 1
colorscheme molokai
" colorscheme atom
" colorscheme onedark
" set backgroud transparency
" hi Normal guibg=NONE ctermbg=NONE
" set background=dark
" set Vim-specific sequences for RGB colors
